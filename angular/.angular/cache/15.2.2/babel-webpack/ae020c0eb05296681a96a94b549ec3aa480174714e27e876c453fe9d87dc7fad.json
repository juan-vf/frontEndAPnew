{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/languaje.service\";\nimport * as i2 from \"src/app/service/token.service\";\nimport * as i3 from \"src/app/service/modal-switch.service\";\nexport class LanguajeComponent {\n  constructor(languajeService, tokenService, $swithLang, $switchUpdLang) {\n    this.languajeService = languajeService;\n    this.tokenService = tokenService;\n    this.$swithLang = $swithLang;\n    this.$switchUpdLang = $switchUpdLang;\n    this.languaje = [];\n    this.modalLang = false;\n    this.modalLangUpd = false;\n    this.admin = false;\n    this.isLogged = false;\n  }\n  ngOnInit() {\n    this.admin = this.isAdmin();\n    this.$swithLang.$modal.subscribe(value => {\n      this.modalLang = value;\n    });\n    this.$switchUpdLang.$modal.subscribe(value => {\n      this.modalLangUpd = value;\n    });\n    this.loadLang();\n    if (this.tokenService.getToken()) {\n      this.isLogged = true;\n    } else {\n      this.isLogged = false;\n    }\n  }\n  loadLang() {\n    this.languajeService.getLanguaje().subscribe(lang => {\n      this.languaje = lang;\n    });\n  }\n  isAdmin() {\n    let auths = this.tokenService.getAuthorities();\n    let admin;\n    auths.filter(auth => {\n      if (String(Object.values(auth)) === 'ROLE_ADMIN') {\n        admin = \"Admin\";\n      }\n    });\n    if (admin != undefined) {\n      return true;\n    }\n    return false;\n  }\n  openModalLang() {\n    this.modalLang = true;\n  }\n  openModalLangUpd() {\n    this.modalLangUpd = true;\n  }\n  deleteLang(id) {\n    if (id != undefined) {\n      this.languajeService.deleteLang(id).subscribe(data => {\n        this.loadLang();\n      }, err => {\n        alert(\"Error al eliminar lenguaje\");\n      });\n    }\n  }\n  getLogged() {\n    return this.isLogged;\n  }\n  getAdmin() {\n    return this.admin;\n  }\n}\nLanguajeComponent.ɵfac = function LanguajeComponent_Factory(t) {\n  return new (t || LanguajeComponent)(i0.ɵɵdirectiveInject(i1.LanguajeService), i0.ɵɵdirectiveInject(i2.TokenService), i0.ɵɵdirectiveInject(i3.ModalSwitchService), i0.ɵɵdirectiveInject(i3.ModalSwitchService));\n};\nLanguajeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LanguajeComponent,\n  selectors: [[\"app-languaje\"]],\n  decls: 2,\n  vars: 0,\n  template: function LanguajeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"languaje works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;AAWA,OAAM,MAAOA,iBAAiB;EAU5BC,YACUC,eAA+B,EAC/BC,YAAyB,EACzBC,UAA8B,EAC9BC,cAAkC;IAHlC,oBAAe,GAAfH,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,eAAU,GAAVC,UAAU;IACV,mBAAc,GAAdC,cAAc;IAbxB,aAAQ,GAAe,EAAE;IAEzB,cAAS,GAAW,KAAK;IACzB,iBAAY,GAAW,KAAK;IAGpB,UAAK,GAAY,KAAK;IACtB,aAAQ,GAAW,KAAK;EAO9B;EAEFC,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,OAAO,EAAE;IAE3B,IAAI,CAACJ,UAAU,CAACK,MAAM,CAACC,SAAS,CAAEC,KAAK,IAAG;MACxC,IAAI,CAACC,SAAS,GAAGD,KAAK;IACxB,CAAC,CAAC;IACF,IAAI,CAACN,cAAc,CAACI,MAAM,CAACC,SAAS,CAAEC,KAAK,IAAG;MAC5C,IAAI,CAACE,YAAY,GAAGF,KAAK;IAC3B,CAAC,CAAC;IACF,IAAI,CAACG,QAAQ,EAAE;IACf,IAAG,IAAI,CAACX,YAAY,CAACY,QAAQ,EAAE,EAAC;MAC9B,IAAI,CAACC,QAAQ,GAAG,IAAI;KACrB,MAAI;MACH,IAAI,CAACA,QAAQ,GAAG,KAAK;;EAEzB;EAGQF,QAAQ;IACd,IAAI,CAACZ,eAAe,CAACe,WAAW,EAAE,CAACP,SAAS,CAAEQ,IAAI,IAAG;MACnD,IAAI,CAACC,QAAQ,GAAGD,IAAI;IACtB,CAAC,CAAC;EACJ;EACQV,OAAO;IACb,IAAIY,KAAK,GAAI,IAAI,CAACjB,YAAY,CAACkB,cAAc,EAAE;IAC/C,IAAId,KAAK;IACTa,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAG;MAAE,IAAGC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACH,IAAI,CAAC,CAAC,KAAK,YAAY,EAAC;QACrEhB,KAAK,GAAG,OAAO;;IAEjB,CAAC,CAAC;IACF,IAAGA,KAAK,IAAIoB,SAAS,EAAC;MACpB,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EACAC,aAAa;IACX,IAAI,CAAChB,SAAS,GAAG,IAAI;EACvB;EACAiB,gBAAgB;IACd,IAAI,CAAChB,YAAY,GAAG,IAAI;EAC1B;EACAiB,UAAU,CAACC,EAAS;IAClB,IAAGA,EAAE,IAAIJ,SAAS,EAAC;MACjB,IAAI,CAACzB,eAAe,CAAC4B,UAAU,CAACC,EAAE,CAAC,CAACrB,SAAS,CAACsB,IAAI,IAAG;QACnD,IAAI,CAAClB,QAAQ,EAAE;MACjB,CAAC,EAAEmB,GAAG,IAAG;QACPC,KAAK,CAAC,4BAA4B,CAAC;MACrC,CAAC,CAAC;;EAEN;EAEOC,SAAS;IACd,OAAO,IAAI,CAACnB,QAAQ;EACtB;EACOoB,QAAQ;IACb,OAAO,IAAI,CAAC7B,KAAK;EACnB;;AAzEWP,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAqC;EAAAC;EAAAC;EAAAC;IAAA;MCX9BC,yBAAG;MAAAA,+BAAe;MAAAA,iBAAI","names":["LanguajeComponent","constructor","languajeService","tokenService","$swithLang","$switchUpdLang","ngOnInit","admin","isAdmin","$modal","subscribe","value","modalLang","modalLangUpd","loadLang","getToken","isLogged","getLanguaje","lang","languaje","auths","getAuthorities","filter","auth","String","Object","values","undefined","openModalLang","openModalLangUpd","deleteLang","id","data","err","alert","getLogged","getAdmin","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\EUloc\\Downloads\\New folder (3)\\angular\\src\\app\\components\\languaje\\languaje.component.ts","C:\\Users\\EUloc\\Downloads\\New folder (3)\\angular\\src\\app\\components\\languaje\\languaje.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Languaje } from 'src/app/model/languaje';\nimport { LanguajeService } from 'src/app/service/languaje.service';\nimport { ModalSwitchService } from 'src/app/service/modal-switch.service';\nimport { TokenService } from 'src/app/service/token.service';\n\n@Component({\n  selector: 'app-languaje',\n  templateUrl: './languaje.component.html',\n  styleUrls: ['./languaje.component.css']\n})\nexport class LanguajeComponent {\n  languaje: Languaje[] = [];\n\n  modalLang:boolean = false;\n  modalLangUpd:boolean = false;\n  langUpdId!:boolean;\n\n  private admin: boolean = false;\n  private isLogged:boolean = false;\n\n  constructor(\n    private languajeService:LanguajeService,\n    private tokenService:TokenService,\n    private $swithLang: ModalSwitchService, \n    private $switchUpdLang: ModalSwitchService,\n  ){}\n\n  ngOnInit(){\n    this.admin = this.isAdmin()\n\n    this.$swithLang.$modal.subscribe((value)=>{\n      this.modalLang = value;\n    });\n    this.$switchUpdLang.$modal.subscribe((value)=>{\n      this.modalLangUpd = value;\n    });\n    this.loadLang()\n    if(this.tokenService.getToken()){\n      this.isLogged = true;\n    }else{\n      this.isLogged = false;\n    }\n  }\n\n\n  private loadLang():void{\n    this.languajeService.getLanguaje().subscribe((lang)=>{\n      this.languaje = lang;\n    });\n  }\n  private isAdmin():boolean{\n    let auths =  this.tokenService.getAuthorities();\n    let admin;\n    auths.filter((auth)=> {if(String(Object.values(auth)) === 'ROLE_ADMIN'){\n      admin = \"Admin\"\n    }\n    });\n    if(admin != undefined){\n      return true;\n    }\n    return false;\n  }\n  openModalLang():void{\n    this.modalLang = true;\n  }\n  openModalLangUpd():void{\n    this.modalLangUpd = true;\n  }\n  deleteLang(id:number):void{\n    if(id != undefined){\n      this.languajeService.deleteLang(id).subscribe(data => {\n        this.loadLang();\n      }, err => {\n        alert(\"Error al eliminar lenguaje\")\n      })\n    }\n  }\n\n  public getLogged():boolean{\n    return this.isLogged;\n  }\n  public getAdmin():boolean{\n    return this.admin;\n  }\n\n}\n","<p>languaje works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}